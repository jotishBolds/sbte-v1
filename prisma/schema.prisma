// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LOCAL")
}

// User model to handle all types of users in the system
model User {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String
  role            Role
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  college         College? @relation(fields: [collegeId], references: [id])
  collegeId       String?
  department      Department? @relation(fields: [departmentId], references: [id])
  departmentId    String?
  student         Student?
  teacher         Teacher?
  financeManager  FinanceManager?
  alumnus         Alumnus?
}

enum Role {
  EDUCATION_DEPARTMENT
  SBTE_ADMIN
  COLLEGE_SUPER_ADMIN
  HOD
  TEACHER
  FINANCE_MANAGER
  STUDENT
  ALUMNUS
}

// College model to store information about colleges
model College {
  id            String   @id @default(cuid())
  name          String
  address       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  users         User[]
  departments   Department[]
  students      Student[]
}

// Department model to represent departments within colleges
model Department {
  id            String   @id @default(cuid())
  name          String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  college       College  @relation(fields: [collegeId], references: [id])
  collegeId     String
  users         User[]
  subjects      Subject[]
  students      Student[]
}

// Student model to store student information
model Student {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  enrollmentNo  String   @unique
  college       College  @relation(fields: [collegeId], references: [id])
  collegeId     String
  department    Department @relation(fields: [departmentId], references: [id])
  departmentId  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  marks         Mark[]
  attendance    Attendance[]
  feePayments   FeePayment[]
  certificates  Certificate[]
  feedback      Feedback[]
}

// Teacher model to store teacher information
model Teacher {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  subjects      Subject[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Subject model to represent subjects taught in departments
model Subject {
  id            String   @id @default(cuid())
  name          String
  code          String
  department    Department @relation(fields: [departmentId], references: [id])
  departmentId  String
  teacher       Teacher  @relation(fields: [teacherId], references: [id])
  teacherId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  marks         Mark[]
  attendance    Attendance[]
}

// Mark model to store student marks
model Mark {
  id            String   @id @default(cuid())
  student       Student  @relation(fields: [studentId], references: [id])
  studentId     String
  subject       Subject  @relation(fields: [subjectId], references: [id])
  subjectId     String
  score         Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Attendance model to store student attendance
model Attendance {
  id            String   @id @default(cuid())
  student       Student  @relation(fields: [studentId], references: [id])
  studentId     String
  subject       Subject  @relation(fields: [subjectId], references: [id])
  subjectId     String
  date          DateTime
  isPresent     Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// FinanceManager model to represent finance managers
model FinanceManager {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// FeePayment model to store fee payment information
model FeePayment {
  id            String   @id @default(cuid())
  student       Student  @relation(fields: [studentId], references: [id])
  studentId     String
  amount        Float
  paymentDate   DateTime
  paymentStatus PaymentStatus
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

// Certificate model to store information about certificates issued to students
model Certificate {
  id            String   @id @default(cuid())
  student       Student  @relation(fields: [studentId], references: [id])
  studentId     String
  type          CertificateType
  issueDate     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum CertificateType {
  DEGREE
  DIPLOMA
  COURSE_COMPLETION
}

// Alumnus model to store information about alumni
model Alumnus {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  graduationYear Int
  jobStatus     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Notification model to store notifications and circulars
model Notification {
  id            String   @id @default(cuid())
  title         String
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Feedback model to store student feedback
model Feedback {
  id            String   @id @default(cuid())
  student       Student  @relation(fields: [studentId], references: [id])
  studentId     String
  content       String
  isAnonymous   Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}